@page "/lastminute"

@using WebApplication1.Data
@using System.Net.Http
@using Microsoft.AspNetCore.Mvc.RazorPages

@inject WeatherForecastService ForecastService
@inject HttpClient Http



<h1>Last minute bookings</h1>

<p>Select a last minute booking</p>


<h2>Search</h2>

<div class="row">
    <input type="text" placeholder="Departure" class="form-control col-sm-1" @bind="@DepSearch"/>
    <input type="text" placeholder="Destination" class="form-control col-sm-1" @bind="@ArrSearch"  />
    <button class="btn btn-primary" @onclick="Search">Search</button>
</div>
<br />



@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Departure</th>
                <th>Destination</th>
                <th>Departure Date</th>
                <th>Arrival Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td><button class="btn btn-primary">Ordner</button></td>
                    <td>@forecast.Departure</td>
                    <td>@forecast.Destination</td>
                    <td>@forecast.DepDate.ToShortDateString()</td>
                    <td>@forecast.Arrival.ToShortDateString()</td>
                </tr>
                
            }
        </tbody>
    </table>
    <hr />
    <button class="btn btn-primary" @onclick="RefreshPage">Refresh</button>
}

@code {

    private string DepSearch;
    private string ArrSearch;

    WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    private void RefreshPage()
    {
        StateHasChanged();
    }

    private void Search()
    {

    }

    public class BasicUsageModel : PageModel
    {
        private readonly IHttpClientFactory _clientFactory;

        public IEnumerable<LastMinuteModel> LastMinuteModel { get; private set; }

        public bool GetLastMinuteError { get; private set; }

        public BasicUsageModel(IHttpClientFactory clientFactory)
        {
            _clientFactory = clientFactory;
        }

        public async Task OnGet()
        {
            var request = new HttpRequestMessage(HttpMethod.Get,
                "https://localhost:44304/api/LastMinutes");
            //request.Headers.Add("Accept", "application/vnd.github.v3+json");
            //request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

            var client = _clientFactory.CreateClient();

            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                LastMinuteModel = await response.Content
                    .ReadAsAsync<IEnumerable<LastMinuteModel>>();
            }
            else
            {
                GetLastMinuteError = true;
                LastMinuteModel = Array.Empty<LastMinuteModel>();
            }
        }
    }
}
